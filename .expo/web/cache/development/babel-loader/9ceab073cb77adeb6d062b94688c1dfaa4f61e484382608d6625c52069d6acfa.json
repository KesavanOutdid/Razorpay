{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport { NavigationContainer } from \"@react-navigation/native\";\nimport { createNativeStackNavigator } from \"@react-navigation/native-stack\";\nimport * as SplashScreen from \"expo-splash-screen\";\nimport { useFonts } from \"expo-font\";\nimport { Details } from \"./screens\";\nimport { useCallback } from \"react\";\nimport BottomTabNavigation from \"./navigations/BottomTabNavigation\";\nimport { StartScreen, LoginScreen, RegisterScreen, Setting, Home } from \"./screens\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar Stack = createNativeStackNavigator();\nexport default function App() {\n  var _useFonts = useFonts({\n      black: require(\"./assets/fonts/Inter-Black.ttf\"),\n      bold: require(\"./assets/fonts/Inter-Bold.ttf\"),\n      regular: require(\"./assets/fonts/Inter-Regular.ttf\"),\n      medium: require(\"./assets/fonts/Inter-Medium.ttf\")\n    }),\n    _useFonts2 = _slicedToArray(_useFonts, 1),\n    fontsLoaded = _useFonts2[0];\n  var onLayoutRootView = useCallback(_asyncToGenerator(function* () {\n    if (fontsLoaded) {\n      yield SplashScreen.hideAsync();\n    }\n  }), [fontsLoaded]);\n  if (!fontsLoaded) {\n    return null;\n  }\n  var handleLogin = function handleLogin(data, username) {\n    alert(JSON.stringify(username + ' login userName'));\n  };\n  return _jsx(NavigationContainer, {\n    onReady: onLayoutRootView,\n    children: _jsxs(Stack.Navigator, {\n      initialRouteName: \"StartScreen\",\n      screenOptions: {\n        headerShown: false\n      },\n      children: [_jsx(Stack.Screen, {\n        name: \"StartScreen\",\n        component: StartScreen\n      }), _jsx(Stack.Screen, {\n        name: \"Home\",\n        children: function children(props) {\n          return _jsx(Home, _objectSpread(_objectSpread({}, props), {}, {\n            handleLogin: handleLogin,\n            username: username\n          }));\n        }\n      }), _jsx(Stack.Screen, {\n        name: \"RegisterScreen\",\n        component: RegisterScreen\n      }), _jsx(Stack.Screen, {\n        name: \"Setting\",\n        component: Setting\n      }), _jsx(Stack.Screen, {\n        name: \"LoginScreen\",\n        component: LoginScreen\n      }), _jsx(Stack.Screen, {\n        name: \"BottomTabNavigation\",\n        component: BottomTabNavigation,\n        options: {\n          headerShown: false\n        }\n      })]\n    })\n  });\n}","map":{"version":3,"names":["NavigationContainer","createNativeStackNavigator","SplashScreen","useFonts","Details","useCallback","BottomTabNavigation","StartScreen","LoginScreen","RegisterScreen","Setting","Home","jsx","_jsx","jsxs","_jsxs","Stack","App","_useFonts","black","require","bold","regular","medium","_useFonts2","_slicedToArray","fontsLoaded","onLayoutRootView","_asyncToGenerator","hideAsync","handleLogin","data","username","alert","JSON","stringify","onReady","children","Navigator","initialRouteName","screenOptions","headerShown","Screen","name","component","props","_objectSpread","options"],"sources":["F:/kesav/ReactNative/MyReactNative/App.js"],"sourcesContent":["import { NavigationContainer } from \"@react-navigation/native\";\nimport { createNativeStackNavigator } from \"@react-navigation/native-stack\";\nimport * as SplashScreen from \"expo-splash-screen\";\nimport { useFonts } from \"expo-font\";\nimport { Details } from \"./screens\"\nimport { useCallback } from \"react\";\nimport BottomTabNavigation from \"./navigations/BottomTabNavigation\";\nimport { StartScreen, LoginScreen, RegisterScreen, Setting, Home} from \"./screens\";\n\nconst Stack = createNativeStackNavigator()\nexport default function App() {\n\n  const [fontsLoaded] = useFonts({\n    black: require(\"./assets/fonts/Inter-Black.ttf\"),\n    bold: require(\"./assets/fonts/Inter-Bold.ttf\"),\n    regular: require(\"./assets/fonts/Inter-Regular.ttf\"),\n    medium: require(\"./assets/fonts/Inter-Medium.ttf\")\n  })\n\n  const onLayoutRootView = useCallback(async () => {\n    if (fontsLoaded) {\n      await SplashScreen.hideAsync()\n    }\n  }, [fontsLoaded]);\n\n  if (!fontsLoaded) {\n    return null\n  }\n\n  // Define your handleLogin function\n  const handleLogin = (data, username) => {\n    alert(JSON.stringify(username + ' login userName'));\n  };\n  return (\n    <NavigationContainer onReady={onLayoutRootView}>\n      <Stack.Navigator initialRouteName=\"StartScreen\" screenOptions={{ headerShown: false }}>\n        <Stack.Screen name=\"StartScreen\" component={StartScreen} />\n        <Stack.Screen name=\"Home\">\n          {(props) => <Home {...props} handleLogin={handleLogin} username={username} />}\n        </Stack.Screen>\n        <Stack.Screen name=\"RegisterScreen\" component={RegisterScreen} />\n        <Stack.Screen name=\"Setting\" component={Setting} />\n        <Stack.Screen name=\"LoginScreen\" component={LoginScreen} />\n        <Stack.Screen name=\"BottomTabNavigation\" component={BottomTabNavigation} options={{ headerShown: false }} />\n      </Stack.Navigator>\n    </NavigationContainer>\n  );\n}\n\n"],"mappings":";;;;;AAAA,SAASA,mBAAmB,QAAQ,0BAA0B;AAC9D,SAASC,0BAA0B,QAAQ,gCAAgC;AAC3E,OAAO,KAAKC,YAAY,MAAM,oBAAoB;AAClD,SAASC,QAAQ,QAAQ,WAAW;AACpC,SAASC,OAAO;AAChB,SAASC,WAAW,QAAQ,OAAO;AACnC,OAAOC,mBAAmB;AAC1B,SAASC,WAAW,EAAEC,WAAW,EAAEC,cAAc,EAAEC,OAAO,EAAEC,IAAI;AAAmB,SAAAC,GAAA,IAAAC,IAAA;AAAA,SAAAC,IAAA,IAAAC,KAAA;AAEnF,IAAMC,KAAK,GAAGf,0BAA0B,CAAC,CAAC;AAC1C,eAAe,SAASgB,GAAGA,CAAA,EAAG;EAE5B,IAAAC,SAAA,GAAsBf,QAAQ,CAAC;MAC7BgB,KAAK,EAAEC,OAAO,iCAAiC,CAAC;MAChDC,IAAI,EAAED,OAAO,gCAAgC,CAAC;MAC9CE,OAAO,EAAEF,OAAO,mCAAmC,CAAC;MACpDG,MAAM,EAAEH,OAAO,kCAAkC;IACnD,CAAC,CAAC;IAAAI,UAAA,GAAAC,cAAA,CAAAP,SAAA;IALKQ,WAAW,GAAAF,UAAA;EAOlB,IAAMG,gBAAgB,GAAGtB,WAAW,CAAAuB,iBAAA,CAAC,aAAY;IAC/C,IAAIF,WAAW,EAAE;MACf,MAAMxB,YAAY,CAAC2B,SAAS,CAAC,CAAC;IAChC;EACF,CAAC,GAAE,CAACH,WAAW,CAAC,CAAC;EAEjB,IAAI,CAACA,WAAW,EAAE;IAChB,OAAO,IAAI;EACb;EAGA,IAAMI,WAAW,GAAG,SAAdA,WAAWA,CAAIC,IAAI,EAAEC,QAAQ,EAAK;IACtCC,KAAK,CAACC,IAAI,CAACC,SAAS,CAACH,QAAQ,GAAG,iBAAiB,CAAC,CAAC;EACrD,CAAC;EACD,OACEnB,IAAA,CAACb,mBAAmB;IAACoC,OAAO,EAAET,gBAAiB;IAAAU,QAAA,EAC7CtB,KAAA,CAACC,KAAK,CAACsB,SAAS;MAACC,gBAAgB,EAAC,aAAa;MAACC,aAAa,EAAE;QAAEC,WAAW,EAAE;MAAM,CAAE;MAAAJ,QAAA,GACpFxB,IAAA,CAACG,KAAK,CAAC0B,MAAM;QAACC,IAAI,EAAC,aAAa;QAACC,SAAS,EAAErC;MAAY,CAAE,CAAC,EAC3DM,IAAA,CAACG,KAAK,CAAC0B,MAAM;QAACC,IAAI,EAAC,MAAM;QAAAN,QAAA,EACtB,SAAAA,SAACQ,KAAK;UAAA,OAAKhC,IAAA,CAACF,IAAI,EAAAmC,aAAA,CAAAA,aAAA,KAAKD,KAAK;YAAEf,WAAW,EAAEA,WAAY;YAACE,QAAQ,EAAEA;UAAS,EAAE,CAAC;QAAA;MAAA,CACjE,CAAC,EACfnB,IAAA,CAACG,KAAK,CAAC0B,MAAM;QAACC,IAAI,EAAC,gBAAgB;QAACC,SAAS,EAAEnC;MAAe,CAAE,CAAC,EACjEI,IAAA,CAACG,KAAK,CAAC0B,MAAM;QAACC,IAAI,EAAC,SAAS;QAACC,SAAS,EAAElC;MAAQ,CAAE,CAAC,EACnDG,IAAA,CAACG,KAAK,CAAC0B,MAAM;QAACC,IAAI,EAAC,aAAa;QAACC,SAAS,EAAEpC;MAAY,CAAE,CAAC,EAC3DK,IAAA,CAACG,KAAK,CAAC0B,MAAM;QAACC,IAAI,EAAC,qBAAqB;QAACC,SAAS,EAAEtC,mBAAoB;QAACyC,OAAO,EAAE;UAAEN,WAAW,EAAE;QAAM;MAAE,CAAE,CAAC;IAAA,CAC7F;EAAC,CACC,CAAC;AAE1B"},"metadata":{},"sourceType":"module","externalDependencies":[]}