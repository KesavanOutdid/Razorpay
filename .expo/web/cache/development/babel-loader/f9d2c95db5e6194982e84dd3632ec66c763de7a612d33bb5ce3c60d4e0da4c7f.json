{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { NavigationContainer, DefaultTheme, DarkTheme } from \"@react-navigation/native\";\nimport { createNativeStackNavigator } from \"@react-navigation/native-stack\";\nimport * as SplashScreen from \"expo-splash-screen\";\nimport { useFonts } from \"expo-font\";\nimport { useCallback } from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport BottomTabNavigation from \"./navigations/BottomTabNavigation\";\nimport { Details, Favourite, Home, Profile, Search, StartScreen, LoginScreen, RegisterScreen, ResetPasswordScreen, Dashboard } from \"./screens\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar Stack = createNativeStackNavigator();\nexport default function App() {\n  var _useFonts = useFonts({\n      black: require(\"./assets/fonts/Inter-Black.ttf\"),\n      bold: require(\"./assets/fonts/Inter-Bold.ttf\"),\n      regular: require(\"./assets/fonts/Inter-Regular.ttf\"),\n      medium: require(\"./assets/fonts/Inter-Medium.ttf\")\n    }),\n    _useFonts2 = _slicedToArray(_useFonts, 1),\n    fontsLoaded = _useFonts2[0];\n  var onLayoutRootView = useCallback(_asyncToGenerator(function* () {\n    if (fontsLoaded) {\n      yield SplashScreen.hideAsync();\n    }\n  }), [fontsLoaded]);\n  if (!fontsLoaded) {\n    return null;\n  }\n  return _jsxs(NavigationContainer, {\n    onReady: onLayoutRootView,\n    theme: DefaultTheme,\n    children: [_jsxs(Stack.Navigator, {\n      initialRouteName: \"StartScreen\",\n      screenOptions: {\n        headerShown: false\n      },\n      children: [_jsx(Stack.Screen, {\n        name: \"StartScreen\",\n        component: StartScreen\n      }), _jsx(Stack.Screen, {\n        name: \"LoginScreen\",\n        component: LoginScreen\n      }), _jsx(Stack.Screen, {\n        name: \"RegisterScreen\",\n        component: RegisterScreen\n      }), _jsx(Stack.Screen, {\n        name: \"Dashboard\",\n        component: Dashboard\n      }), _jsx(Stack.Screen, {\n        name: \"ResetPasswordScreen\",\n        component: ResetPasswordScreen\n      }), _jsx(Stack.Screen, {\n        name: \"Details\",\n        component: Details,\n        options: {\n          headerShown: false\n        }\n      }), Platform.OS === \"web\" ? _jsx(Stack.Screen, {\n        name: \"BottomTabNavigation\",\n        component: BottomTabNavigation,\n        options: {\n          headerShown: false\n        }\n      }) : null]\n    }), Platform.OS !== \"web\" ? _jsx(BottomTabNavigation, {}) : null]\n  });\n}","map":{"version":3,"names":["NavigationContainer","DefaultTheme","DarkTheme","createNativeStackNavigator","SplashScreen","useFonts","useCallback","View","Platform","BottomTabNavigation","Details","Favourite","Home","Profile","Search","StartScreen","LoginScreen","RegisterScreen","ResetPasswordScreen","Dashboard","jsx","_jsx","jsxs","_jsxs","Stack","App","_useFonts","black","require","bold","regular","medium","_useFonts2","_slicedToArray","fontsLoaded","onLayoutRootView","_asyncToGenerator","hideAsync","onReady","theme","children","Navigator","initialRouteName","screenOptions","headerShown","Screen","name","component","options","OS"],"sources":["F:/kesav/ReactNative/MyReactNative/App.js"],"sourcesContent":["import { NavigationContainer, DefaultTheme, DarkTheme } from \"@react-navigation/native\";\nimport { createNativeStackNavigator } from \"@react-navigation/native-stack\";\nimport * as SplashScreen from \"expo-splash-screen\";\nimport { useFonts } from \"expo-font\";\nimport { useCallback } from \"react\";\nimport { View, Platform } from \"react-native\";\nimport BottomTabNavigation from \"./navigations/BottomTabNavigation\";\nimport { Details, Favourite, Home, Profile, Search, StartScreen, LoginScreen, RegisterScreen, ResetPasswordScreen, Dashboard } from \"./screens\";\n\nconst Stack = createNativeStackNavigator();\n\nexport default function App() {\n  const [fontsLoaded] = useFonts({\n    black: require(\"./assets/fonts/Inter-Black.ttf\"),\n    bold: require(\"./assets/fonts/Inter-Bold.ttf\"),\n    regular: require(\"./assets/fonts/Inter-Regular.ttf\"),\n    medium: require(\"./assets/fonts/Inter-Medium.ttf\")\n  });\n\n  const onLayoutRootView = useCallback(async () => {\n    if (fontsLoaded) {\n      await SplashScreen.hideAsync();\n    }\n  }, [fontsLoaded]);\n\n  if (!fontsLoaded) {\n    return null;\n  }\n\n  return (\n    <NavigationContainer onReady={onLayoutRootView} theme={DefaultTheme}>\n      <Stack.Navigator\n        initialRouteName=\"StartScreen\"\n        screenOptions={{\n          headerShown: false,\n        }}\n      >\n        <Stack.Screen name=\"StartScreen\" component={StartScreen} />\n        <Stack.Screen name=\"LoginScreen\" component={LoginScreen} />\n        <Stack.Screen name=\"RegisterScreen\" component={RegisterScreen} />\n        <Stack.Screen name=\"Dashboard\" component={Dashboard} />\n        <Stack.Screen\n          name=\"ResetPasswordScreen\"\n          component={ResetPasswordScreen}\n        />\n        <Stack.Screen\n          name=\"Details\"\n          component={Details}\n          options={{\n            headerShown: false,\n          }}\n        />\n        {Platform.OS === \"web\" ? (\n          <Stack.Screen\n            name=\"BottomTabNavigation\"\n            component={BottomTabNavigation}\n            options={{\n              headerShown: false,\n            }}\n          />\n        ) : null}\n      </Stack.Navigator>\n      {Platform.OS !== \"web\" ? (\n        <BottomTabNavigation />\n      ) : null}\n    </NavigationContainer>\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}