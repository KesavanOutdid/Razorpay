{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { NavigationContainer } from \"@react-navigation/native\";\nimport { createNativeStackNavigator } from \"@react-navigation/native-stack\";\nimport * as SplashScreen from \"expo-splash-screen\";\nimport { useFonts } from \"expo-font\";\nimport { Details } from \"./screens\";\nimport { useCallback } from \"react\";\nimport BottomTabNavigation from \"./navigations/BottomTabNavigation\";\nimport { Favourite, Home, Profile, Search, StartScreen, LoginScreen, RegisterScreen, ResetPasswordScreen, Dashboard } from \"./screens\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar Stack = createNativeStackNavigator();\nexport default function App() {\n  var _useFonts = useFonts({\n      black: require(\"./assets/fonts/Inter-Black.ttf\"),\n      bold: require(\"./assets/fonts/Inter-Bold.ttf\"),\n      regular: require(\"./assets/fonts/Inter-Regular.ttf\"),\n      medium: require(\"./assets/fonts/Inter-Medium.ttf\")\n    }),\n    _useFonts2 = _slicedToArray(_useFonts, 1),\n    fontsLoaded = _useFonts2[0];\n  var onLayoutRootView = useCallback(_asyncToGenerator(function* () {\n    if (fontsLoaded) {\n      yield SplashScreen.hideAsync();\n    }\n  }), [fontsLoaded]);\n  if (!fontsLoaded) {\n    return null;\n  }\n  var screenWidth = Dimensions.get('window').width;\n  if (screenWidth < 600) {\n    return _jsx(Tab.Navigator, {\n      screenOptions: screenOptions\n    });\n  } else {\n    return _jsx(View, {});\n  }\n  return _jsx(NavigationContainer, {\n    onReady: onLayoutRootView,\n    children: _jsxs(Stack.Navigator, {\n      initialRouteName: \"StartScreen\",\n      screenOptions: {\n        headerShown: false\n      },\n      children: [_jsx(Stack.Screen, {\n        name: \"StartScreen\",\n        component: StartScreen\n      }), _jsx(Stack.Screen, {\n        name: \"LoginScreen\",\n        component: LoginScreen\n      }), _jsx(Stack.Screen, {\n        name: \"RegisterScreen\",\n        component: RegisterScreen\n      }), _jsx(Stack.Screen, {\n        name: \"Dashboard\",\n        component: Dashboard\n      }), _jsx(Stack.Screen, {\n        name: \"ResetPasswordScreen\",\n        component: ResetPasswordScreen\n      }), _jsx(Stack.Screen, {\n        name: \"BottomTabNavigation\",\n        component: BottomTabNavigation,\n        options: {\n          headerShown: false\n        }\n      }), _jsx(Stack.Screen, {\n        name: \"Details\",\n        component: Details,\n        options: {\n          headerShown: false\n        }\n      })]\n    })\n  });\n}","map":{"version":3,"names":["NavigationContainer","createNativeStackNavigator","SplashScreen","useFonts","Details","useCallback","BottomTabNavigation","Favourite","Home","Profile","Search","StartScreen","LoginScreen","RegisterScreen","ResetPasswordScreen","Dashboard","jsx","_jsx","jsxs","_jsxs","Stack","App","_useFonts","black","require","bold","regular","medium","_useFonts2","_slicedToArray","fontsLoaded","onLayoutRootView","_asyncToGenerator","hideAsync","screenWidth","Dimensions","get","width","Tab","Navigator","screenOptions","View","onReady","children","initialRouteName","headerShown","Screen","name","component","options"],"sources":["F:/kesav/ReactNative/MyReactNative/App.js"],"sourcesContent":["import { NavigationContainer } from \"@react-navigation/native\";\nimport { createNativeStackNavigator } from \"@react-navigation/native-stack\";\nimport * as SplashScreen from \"expo-splash-screen\";\nimport { useFonts } from \"expo-font\";\nimport { Details } from \"./screens\"\nimport { useCallback } from \"react\";\nimport BottomTabNavigation from \"./navigations/BottomTabNavigation\";\nimport { Favourite, Home, Profile, Search,  StartScreen, LoginScreen, RegisterScreen, ResetPasswordScreen, Dashboard, } from \"./screens\";\n\nconst Stack = createNativeStackNavigator()\nexport default function App() {\n\n  const [fontsLoaded] = useFonts({\n    black: require(\"./assets/fonts/Inter-Black.ttf\"),\n    bold: require(\"./assets/fonts/Inter-Bold.ttf\"),\n    regular: require(\"./assets/fonts/Inter-Regular.ttf\"),\n    medium: require(\"./assets/fonts/Inter-Medium.ttf\")\n  })\n\n  const onLayoutRootView = useCallback(async () => {\n    if (fontsLoaded) {\n      await SplashScreen.hideAsync()\n    }\n  }, [fontsLoaded]);\n\n  if (!fontsLoaded) {\n    return null\n  }\n  const screenWidth = Dimensions.get('window').width;\n\n  if (screenWidth < 600) {\n    return (\n      <Tab.Navigator screenOptions={screenOptions}>\n        {/* Tab Screens */}\n      </Tab.Navigator>\n    );\n  } else {\n    return (\n      <View>\n        {/* Render something else or nothing */}\n      </View>\n    );\n  }\n  return (\n    <NavigationContainer onReady={onLayoutRootView}>\n     <Stack.Navigator\n          initialRouteName=\"StartScreen\"\n          screenOptions={{\n            headerShown: false,\n          }}\n        >\n          <Stack.Screen name=\"StartScreen\" component={StartScreen} />\n          <Stack.Screen name=\"LoginScreen\" component={LoginScreen} />\n          <Stack.Screen name=\"RegisterScreen\" component={RegisterScreen} />\n          <Stack.Screen name=\"Dashboard\" component={Dashboard} />\n          <Stack.Screen\n            name=\"ResetPasswordScreen\"\n            component={ResetPasswordScreen}\n          />\n        <Stack.Screen\n          name=\"BottomTabNavigation\"\n          component={BottomTabNavigation}\n          options={{\n            headerShown: false\n          }}\n        />\n        <Stack.Screen\n          name=\"Details\"\n          component={Details}\n          options={{\n            headerShown: false\n          }}\n        />\n      </Stack.Navigator>\n    </NavigationContainer>\n  );\n}\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}